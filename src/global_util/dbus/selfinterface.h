/*
 * This file was generated by qdbusxml2cpp-fix version 0.8
 * Command line was: qdbusxml2cpp-fix -p /home/zyz/works/work/v25/dde-session-shell-snipe/src/global_util/dbus/selfinterface /home/zyz/works/work/v25/dde-session-shell-snipe/xml/snipe/org.freedesktop.login1.session.self.xml
 *
 * qdbusxml2cpp-fix is Copyright (C) 2016 Deepin Technology Co., Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef SELFINTERFACE_H
#define SELFINTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

#include <DDBusExtendedAbstractInterface>
#include <QtDBus/QtDBus>


/*
 * Proxy class for interface org.freedesktop.login1.Session
 */
class __OrgFreedesktopLogin1SessionInterfacePrivate;
class __OrgFreedesktopLogin1SessionInterface : public DTK_CORE_NAMESPACE::DDBusExtendedAbstractInterface
{
    Q_OBJECT

public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.login1.Session"; }

public:
    explicit __OrgFreedesktopLogin1SessionInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~__OrgFreedesktopLogin1SessionInterface();

    Q_PROPERTY(bool Active READ active NOTIFY ActiveChanged)
    bool active();

    Q_PROPERTY(QString Desktop READ desktop NOTIFY DesktopChanged)
    QString desktop();

    Q_PROPERTY(QString Display READ display NOTIFY DisplayChanged)
    QString display();

    Q_PROPERTY(QString Id READ id NOTIFY IdChanged)
    QString id();

    Q_PROPERTY(QString Name READ name NOTIFY NameChanged)
    QString name();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Activate()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Activate"), argumentList);
    }

    inline void ActivateQueued()
    {
        QList<QVariant> argumentList;

        CallQueued(QStringLiteral("Activate"), argumentList);
    }


    inline QDBusPendingReply<> Lock()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Lock"), argumentList);
    }

    inline void LockQueued()
    {
        QList<QVariant> argumentList;

        CallQueued(QStringLiteral("Lock"), argumentList);
    }


    inline QDBusPendingReply<> Terminate()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Terminate"), argumentList);
    }

    inline void TerminateQueued()
    {
        QList<QVariant> argumentList;

        CallQueued(QStringLiteral("Terminate"), argumentList);
    }


    inline QDBusPendingReply<> Unlock()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Unlock"), argumentList);
    }

    inline void UnlockQueued()
    {
        QList<QVariant> argumentList;

        CallQueued(QStringLiteral("Unlock"), argumentList);
    }



Q_SIGNALS: // SIGNALS
    // begin property changed signals
    void ActiveChanged(bool  value) const;
    void DesktopChanged(const QString & value) const;
    void DisplayChanged(const QString & value) const;
    void IdChanged(const QString & value) const;
    void NameChanged(const QString & value) const;

public Q_SLOTS:
    void CallQueued(const QString &callName, const QList<QVariant> &args);

private Q_SLOTS:
    void onPendingCallFinished(QDBusPendingCallWatcher *w);
    void onPropertyChanged(const QString &propName, const QVariant &value);

private:
    __OrgFreedesktopLogin1SessionInterfacePrivate *d_ptr;
};

namespace org {
  namespace freedesktop {
    namespace login1 {
      typedef ::__OrgFreedesktopLogin1SessionInterface Session;
    }
  }
}
#endif
