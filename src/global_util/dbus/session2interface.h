/*
 * This file was generated by qdbusxml2cpp-fix version 0.8
 * Command line was: qdbusxml2cpp-fix -p /home/zyz/works/work/v25/dde-session-shell-snipe/src/global_util/dbus/session2interface /home/zyz/works/work/v25/dde-session-shell-snipe/xml/snipe/org.deepin.dde.Authenticate1.Session2.xml
 *
 * qdbusxml2cpp-fix is Copyright (C) 2016 Deepin Technology Co., Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef SESSION2INTERFACE_H
#define SESSION2INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

#include <DDBusExtendedAbstractInterface>
#include <QtDBus/QtDBus>

#include "types/mfainfolist.h"
#include "types/arrayint.h"

/*
 * Proxy class for interface org.deepin.dde.Authenticate1.Session
 */
class __OrgDeepinDdeAuthenticate1SessionInterfacePrivate;
class __OrgDeepinDdeAuthenticate1SessionInterface : public DTK_CORE_NAMESPACE::DDBusExtendedAbstractInterface
{
    Q_OBJECT

public:
    static inline const char *staticInterfaceName()
    { return "org.deepin.dde.Authenticate1.Session"; }

public:
    explicit __OrgDeepinDdeAuthenticate1SessionInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~__OrgDeepinDdeAuthenticate1SessionInterface();

    Q_PROPERTY(MFAInfoList FactorsInfo READ factorsInfo NOTIFY FactorsInfoChanged)
    MFAInfoList factorsInfo();

    Q_PROPERTY(bool IsFuzzyMFA READ isFuzzyMFA NOTIFY IsFuzzyMFAChanged)
    bool isFuzzyMFA();

    Q_PROPERTY(bool IsMFA READ isMFA NOTIFY IsMFAChanged)
    bool isMFA();

    Q_PROPERTY(int PINLen READ pINLen NOTIFY PINLenChanged)
    int pINLen();

    Q_PROPERTY(QString Prompt READ prompt NOTIFY PromptChanged)
    QString prompt();

    Q_PROPERTY(QString Username READ username NOTIFY UsernameChanged)
    QString username();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<int, ArrayInt, QString> EncryptKey(int encryptType, ArrayInt encryptMethod)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(encryptType) << QVariant::fromValue(encryptMethod);
        return asyncCallWithArgumentList(QStringLiteral("EncryptKey"), argumentList);
    }


    inline QDBusReply<int> EncryptKey(int encryptType, ArrayInt encryptMethod, ArrayInt &encryptMethod_, QString &publicKey)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(encryptType) << QVariant::fromValue(encryptMethod);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("EncryptKey"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 3) {
            encryptMethod_ = qdbus_cast<ArrayInt>(reply.arguments().at(1));
            publicKey = qdbus_cast<QString>(reply.arguments().at(2));
        }
        return reply;
    }

    inline QDBusPendingReply<int> End(int flag)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(flag);
        return asyncCallWithArgumentList(QStringLiteral("End"), argumentList);
    }



    inline QDBusPendingReply<int> GetResult()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetResult"), argumentList);
    }



    inline QDBusPendingReply<> PrivilegesDisable()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("PrivilegesDisable"), argumentList);
    }

    inline void PrivilegesDisableQueued()
    {
        QList<QVariant> argumentList;

        CallQueued(QStringLiteral("PrivilegesDisable"), argumentList);
    }


    inline QDBusPendingReply<bool> PrivilegesEnable(const QString &path)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(path);
        return asyncCallWithArgumentList(QStringLiteral("PrivilegesEnable"), argumentList);
    }



    inline QDBusPendingReply<> Quit()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Quit"), argumentList);
    }

    inline void QuitQueued()
    {
        QList<QVariant> argumentList;

        CallQueued(QStringLiteral("Quit"), argumentList);
    }


    inline QDBusPendingReply<> SetQuitFlag(int flag)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(flag);
        return asyncCallWithArgumentList(QStringLiteral("SetQuitFlag"), argumentList);
    }

    inline void SetQuitFlagQueued(int flag)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(flag);

        CallQueued(QStringLiteral("SetQuitFlag"), argumentList);
    }


    inline QDBusPendingReply<> SetSymmetricKey(const QByteArray &key)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(key);
        return asyncCallWithArgumentList(QStringLiteral("SetSymmetricKey"), argumentList);
    }

    inline void SetSymmetricKeyQueued(const QByteArray &key)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(key);

        CallQueued(QStringLiteral("SetSymmetricKey"), argumentList);
    }


    inline QDBusPendingReply<> SetToken(int flag, const QByteArray &token)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(flag) << QVariant::fromValue(token);
        return asyncCallWithArgumentList(QStringLiteral("SetToken"), argumentList);
    }

    inline void SetTokenQueued(int flag, const QByteArray &token)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(flag) << QVariant::fromValue(token);

        CallQueued(QStringLiteral("SetToken"), argumentList);
    }


    inline QDBusPendingReply<int> Start(int flag, int timeout)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(flag) << QVariant::fromValue(timeout);
        return asyncCallWithArgumentList(QStringLiteral("Start"), argumentList);
    }




Q_SIGNALS: // SIGNALS
    void Status(int flag, int status, const QString &msg);
    // begin property changed signals
    void FactorsInfoChanged(MFAInfoList  value) const;
    void IsFuzzyMFAChanged(bool  value) const;
    void IsMFAChanged(bool  value) const;
    void PINLenChanged(int  value) const;
    void PromptChanged(const QString & value) const;
    void UsernameChanged(const QString & value) const;

public Q_SLOTS:
    void CallQueued(const QString &callName, const QList<QVariant> &args);

private Q_SLOTS:
    void onPendingCallFinished(QDBusPendingCallWatcher *w);
    void onPropertyChanged(const QString &propName, const QVariant &value);

private:
    __OrgDeepinDdeAuthenticate1SessionInterfacePrivate *d_ptr;
};

namespace org {
  namespace deepin {
    namespace dde {
      namespace authenticate1 {
        typedef ::__OrgDeepinDdeAuthenticate1SessionInterface Session;
      }
    }
  }
}
#endif
