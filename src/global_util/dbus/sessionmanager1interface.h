/*
 * This file was generated by qdbusxml2cpp-fix version 0.8
 * Command line was: qdbusxml2cpp-fix -p /home/zyz/works/work/v25/dde-session-shell-snipe/src/global_util/dbus/sessionmanager1interface /home/zyz/works/work/v25/dde-session-shell-snipe/xml/snipe/org.deepin.dde.SessionManager1.xml
 *
 * qdbusxml2cpp-fix is Copyright (C) 2016 Deepin Technology Co., Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef SESSIONMANAGER1INTERFACE_H
#define SESSIONMANAGER1INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

#include <DDBusExtendedAbstractInterface>
#include <QtDBus/QtDBus>


/*
 * Proxy class for interface org.deepin.dde.SessionManager1
 */
class __OrgDeepinDdeSessionManager1InterfacePrivate;
class __OrgDeepinDdeSessionManager1Interface : public DTK_CORE_NAMESPACE::DDBusExtendedAbstractInterface
{
    Q_OBJECT

public:
    static inline const char *staticInterfaceName()
    { return "org.deepin.dde.SessionManager1"; }

public:
    explicit __OrgDeepinDdeSessionManager1Interface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~__OrgDeepinDdeSessionManager1Interface();

    Q_PROPERTY(QString CurrentUid READ currentUid NOTIFY CurrentUidChanged)
    QString currentUid();

    Q_PROPERTY(bool Locked READ locked NOTIFY LockedChanged)
    bool locked();

    Q_PROPERTY(int Stage READ stage NOTIFY StageChanged)
    int stage();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> AllowSessionDaemonRun()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("AllowSessionDaemonRun"), argumentList);
    }



    inline QDBusPendingReply<bool> CanHibernate()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("CanHibernate"), argumentList);
    }



    inline QDBusPendingReply<bool> CanLogout()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("CanLogout"), argumentList);
    }



    inline QDBusPendingReply<bool> CanReboot()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("CanReboot"), argumentList);
    }



    inline QDBusPendingReply<bool> CanShutdown()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("CanShutdown"), argumentList);
    }



    inline QDBusPendingReply<bool> CanSuspend()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("CanSuspend"), argumentList);
    }



    inline QDBusPendingReply<> ForceLogout()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("ForceLogout"), argumentList);
    }

    inline void ForceLogoutQueued()
    {
        QList<QVariant> argumentList;

        CallQueued(QStringLiteral("ForceLogout"), argumentList);
    }


    inline QDBusPendingReply<> ForceReboot()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("ForceReboot"), argumentList);
    }

    inline void ForceRebootQueued()
    {
        QList<QVariant> argumentList;

        CallQueued(QStringLiteral("ForceReboot"), argumentList);
    }


    inline QDBusPendingReply<> ForceShutdown()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("ForceShutdown"), argumentList);
    }

    inline void ForceShutdownQueued()
    {
        QList<QVariant> argumentList;

        CallQueued(QStringLiteral("ForceShutdown"), argumentList);
    }


    inline QDBusPendingReply<> Logout()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Logout"), argumentList);
    }

    inline void LogoutQueued()
    {
        QList<QVariant> argumentList;

        CallQueued(QStringLiteral("Logout"), argumentList);
    }


    inline QDBusPendingReply<> PowerOffChoose()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("PowerOffChoose"), argumentList);
    }

    inline void PowerOffChooseQueued()
    {
        QList<QVariant> argumentList;

        CallQueued(QStringLiteral("PowerOffChoose"), argumentList);
    }


    inline QDBusPendingReply<> Reboot()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Reboot"), argumentList);
    }

    inline void RebootQueued()
    {
        QList<QVariant> argumentList;

        CallQueued(QStringLiteral("Reboot"), argumentList);
    }


    inline QDBusPendingReply<bool> Register(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("Register"), argumentList);
    }



    inline QDBusPendingReply<> RequestHibernate()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("RequestHibernate"), argumentList);
    }

    inline void RequestHibernateQueued()
    {
        QList<QVariant> argumentList;

        CallQueued(QStringLiteral("RequestHibernate"), argumentList);
    }


    inline QDBusPendingReply<> RequestLock()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("RequestLock"), argumentList);
    }

    inline void RequestLockQueued()
    {
        QList<QVariant> argumentList;

        CallQueued(QStringLiteral("RequestLock"), argumentList);
    }


    inline QDBusPendingReply<> RequestLogout()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("RequestLogout"), argumentList);
    }

    inline void RequestLogoutQueued()
    {
        QList<QVariant> argumentList;

        CallQueued(QStringLiteral("RequestLogout"), argumentList);
    }


    inline QDBusPendingReply<> RequestReboot()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("RequestReboot"), argumentList);
    }

    inline void RequestRebootQueued()
    {
        QList<QVariant> argumentList;

        CallQueued(QStringLiteral("RequestReboot"), argumentList);
    }


    inline QDBusPendingReply<> RequestShutdown()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("RequestShutdown"), argumentList);
    }

    inline void RequestShutdownQueued()
    {
        QList<QVariant> argumentList;

        CallQueued(QStringLiteral("RequestShutdown"), argumentList);
    }


    inline QDBusPendingReply<> RequestSuspend()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("RequestSuspend"), argumentList);
    }

    inline void RequestSuspendQueued()
    {
        QList<QVariant> argumentList;

        CallQueued(QStringLiteral("RequestSuspend"), argumentList);
    }


    inline QDBusPendingReply<> SetLocked(bool in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetLocked"), argumentList);
    }

    inline void SetLockedQueued(bool in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);

        CallQueued(QStringLiteral("SetLocked"), argumentList);
    }


    inline QDBusPendingReply<> Shutdown()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Shutdown"), argumentList);
    }

    inline void ShutdownQueued()
    {
        QList<QVariant> argumentList;

        CallQueued(QStringLiteral("Shutdown"), argumentList);
    }


    inline QDBusPendingReply<> ToggleDebug()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("ToggleDebug"), argumentList);
    }

    inline void ToggleDebugQueued()
    {
        QList<QVariant> argumentList;

        CallQueued(QStringLiteral("ToggleDebug"), argumentList);
    }



Q_SIGNALS: // SIGNALS
    void Unlock();
    // begin property changed signals
    void CurrentUidChanged(const QString & value) const;
    void LockedChanged(bool  value) const;
    void StageChanged(int  value) const;

public Q_SLOTS:
    void CallQueued(const QString &callName, const QList<QVariant> &args);

private Q_SLOTS:
    void onPendingCallFinished(QDBusPendingCallWatcher *w);
    void onPropertyChanged(const QString &propName, const QVariant &value);

private:
    __OrgDeepinDdeSessionManager1InterfacePrivate *d_ptr;
};

namespace org {
  namespace deepin {
    namespace dde {
      typedef ::__OrgDeepinDdeSessionManager1Interface SessionManager1;
    }
  }
}
#endif
