/*
 * This file was generated by qdbusxml2cpp-fix version 0.8
 * Command line was: qdbusxml2cpp-fix -p /home/zyz/works/work/v25/dde-session-shell-snipe/src/global_util/dbus/imageeffect1interface /home/zyz/works/work/v25/dde-session-shell-snipe/xml/snipe/org.deepin.dde.ImageEffect1.xml
 *
 * qdbusxml2cpp-fix is Copyright (C) 2016 Deepin Technology Co., Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef IMAGEEFFECT1INTERFACE_H
#define IMAGEEFFECT1INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

#include <DDBusExtendedAbstractInterface>
#include <QtDBus/QtDBus>


/*
 * Proxy class for interface org.deepin.dde.ImageEffect1
 */
class __OrgDeepinDdeImageEffect1InterfacePrivate;
class __OrgDeepinDdeImageEffect1Interface : public DTK_CORE_NAMESPACE::DDBusExtendedAbstractInterface
{
    Q_OBJECT

public:
    static inline const char *staticInterfaceName()
    { return "org.deepin.dde.ImageEffect1"; }

public:
    explicit __OrgDeepinDdeImageEffect1Interface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~__OrgDeepinDdeImageEffect1Interface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Delete(const QString &effect, const QString &filename)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(effect) << QVariant::fromValue(filename);
        return asyncCallWithArgumentList(QStringLiteral("Delete"), argumentList);
    }

    inline void DeleteQueued(const QString &effect, const QString &filename)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(effect) << QVariant::fromValue(filename);

        CallQueued(QStringLiteral("Delete"), argumentList);
    }


    inline QDBusPendingReply<QString> Get(const QString &effect, const QString &filename)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(effect) << QVariant::fromValue(filename);
        return asyncCallWithArgumentList(QStringLiteral("Get"), argumentList);
    }




Q_SIGNALS: // SIGNALS
    // begin property changed signals

public Q_SLOTS:
    void CallQueued(const QString &callName, const QList<QVariant> &args);

private Q_SLOTS:
    void onPendingCallFinished(QDBusPendingCallWatcher *w);

private:
    __OrgDeepinDdeImageEffect1InterfacePrivate *d_ptr;
};

namespace org {
  namespace deepin {
    namespace dde {
      typedef ::__OrgDeepinDdeImageEffect1Interface ImageEffect1;
    }
  }
}
#endif
