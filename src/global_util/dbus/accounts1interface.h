/*
 * This file was generated by qdbusxml2cpp-fix version 0.8
 * Command line was: qdbusxml2cpp-fix -p /home/zyz/works/work/v25/dde-session-shell-snipe/src/global_util/dbus/accounts1interface /home/zyz/works/work/v25/dde-session-shell-snipe/xml/snipe/org.deepin.dde.Accounts1.xml
 *
 * qdbusxml2cpp-fix is Copyright (C) 2016 Deepin Technology Co., Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef ACCOUNTS1INTERFACE_H
#define ACCOUNTS1INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

#include <DDBusExtendedAbstractInterface>
#include <QtDBus/QtDBus>


/*
 * Proxy class for interface org.deepin.dde.Accounts1
 */
class __OrgDeepinDdeAccounts1InterfacePrivate;
class __OrgDeepinDdeAccounts1Interface : public DTK_CORE_NAMESPACE::DDBusExtendedAbstractInterface
{
    Q_OBJECT

public:
    static inline const char *staticInterfaceName()
    { return "org.deepin.dde.Accounts1"; }

public:
    explicit __OrgDeepinDdeAccounts1Interface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~__OrgDeepinDdeAccounts1Interface();

    Q_PROPERTY(bool AllowGuest READ allowGuest NOTIFY AllowGuestChanged)
    bool allowGuest();

    Q_PROPERTY(QString GuestIcon READ guestIcon NOTIFY GuestIconChanged)
    QString guestIcon();

    Q_PROPERTY(QStringList UserList READ userList NOTIFY UserListChanged)
    QStringList userList();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> AllowGuestAccount(bool in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("AllowGuestAccount"), argumentList);
    }

    inline void AllowGuestAccountQueued(bool in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);

        CallQueued(QStringLiteral("AllowGuestAccount"), argumentList);
    }


    inline QDBusPendingReply<QString> CreateGuestAccount()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("CreateGuestAccount"), argumentList);
    }



    inline QDBusPendingReply<QDBusObjectPath> CreateUser(const QString &in0, const QString &in1, int in2)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1) << QVariant::fromValue(in2);
        return asyncCallWithArgumentList(QStringLiteral("CreateUser"), argumentList);
    }



    inline QDBusPendingReply<> DeleteUser(const QString &in0, bool in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("DeleteUser"), argumentList);
    }

    inline void DeleteUserQueued(const QString &in0, bool in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);

        CallQueued(QStringLiteral("DeleteUser"), argumentList);
    }


    inline QDBusPendingReply<QString> FindUserById(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("FindUserById"), argumentList);
    }



    inline QDBusPendingReply<QString> FindUserByName(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("FindUserByName"), argumentList);
    }



    inline QDBusPendingReply<QStringList> GetGroups()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetGroups"), argumentList);
    }



    inline QDBusPendingReply<QStringList> GetPresetGroups(int in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("GetPresetGroups"), argumentList);
    }



    inline QDBusPendingReply<bool, QString, int> IsPasswordValid(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("IsPasswordValid"), argumentList);
    }


    inline QDBusReply<bool> IsPasswordValid(const QString &in0, QString &out1, int &out2)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("IsPasswordValid"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 3) {
            out1 = qdbus_cast<QString>(reply.arguments().at(1));
            out2 = qdbus_cast<int>(reply.arguments().at(2));
        }
        return reply;
    }

    inline QDBusPendingReply<bool, QString, int> IsUsernameValid(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("IsUsernameValid"), argumentList);
    }


    inline QDBusReply<bool> IsUsernameValid(const QString &in0, QString &out1, int &out2)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("IsUsernameValid"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 3) {
            out1 = qdbus_cast<QString>(reply.arguments().at(1));
            out2 = qdbus_cast<int>(reply.arguments().at(2));
        }
        return reply;
    }

    inline QDBusPendingReply<QString> RandUserIcon()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("RandUserIcon"), argumentList);
    }




Q_SIGNALS: // SIGNALS
    void UserAdded(const QString &in0);
    void UserDeleted(const QString &in0);
    // begin property changed signals
    void AllowGuestChanged(bool  value) const;
    void GuestIconChanged(const QString & value) const;
    void UserListChanged(const QStringList & value) const;

public Q_SLOTS:
    void CallQueued(const QString &callName, const QList<QVariant> &args);

private Q_SLOTS:
    void onPendingCallFinished(QDBusPendingCallWatcher *w);
    void onPropertyChanged(const QString &propName, const QVariant &value);

private:
    __OrgDeepinDdeAccounts1InterfacePrivate *d_ptr;
};

namespace org {
  namespace deepin {
    namespace dde {
      typedef ::__OrgDeepinDdeAccounts1Interface Accounts1;
    }
  }
}
#endif
